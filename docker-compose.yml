# Ce fichier est conçu pour lancer les services tiers (PostgreSQL et Elasticsearch) en local.
# L'application backend (Python) et frontend (React) sont lancées séparément, hors de Docker.

services:
  # --- Service Elasticsearch ---
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.1
    container_name: analyzer_es_dev
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # Sécurité désactivée pour simplifier le développement
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - es_dev_data:/usr/share/elasticsearch/data
      # --- LA SYNCHRONISATION ---
      # Mappe le dossier local des fichiers d'analyse directement dans le conteneur Elasticsearch.
      # Votre backend, qui tourne localement, écrira dans ce dossier.
      - ./backend/app/es_analysis_files:/usr/share/elasticsearch/config/analysis
    networks:
      - analyzer_dev_network

  # --- Service Base de Données ---
  db:
    image: postgres:16
    container_name: analyzer_db_dev
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: analyzer
    ports:
      - "5432:5432" # Mappé sur l'hôte pour que votre backend local puisse s'y connecter
    volumes:
      - pg_dev_data:/var/lib/postgresql/data
    networks:
      - analyzer_dev_network

  # --- Service Prometheus ---
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: analyzer_prometheus_dev
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./backend/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
    networks:
      - analyzer_dev_network

  # --- Service Alertmanager ---
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: analyzer_alertmanager_dev
    restart: always
    ports:
      - "9093:9093"
    volumes:
      - alertmanager_data:/alertmanager
      - ./backend/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.listen-address=:9093'
    networks:
      - analyzer_dev_network

  # --- Service Grafana ---
  grafana:
    image: grafana/grafana:10.2.0
    container_name: analyzer_grafana_dev
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./backend/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - analyzer_dev_network

# --- Volumes et Réseaux pour le développement ---
volumes:
  pg_dev_data:
  es_dev_data:
  prometheus_data:
  alertmanager_data:
  grafana_data:

networks:
  analyzer_dev_network:
    driver: bridge
