import type { Node as ReactFlowNode, Edge as ReactFlowEdge } from 'reactflow';

/**
 * Type fonctionnel du n≈ìud.
 */
export enum Kind {
    CharFilter = "char_filter",
    Input = "input",
    Output = "output",
    TokenFilter = "token_filter",
    Tokenizer = "tokenizer",
}

// Interface pour les donn√©es personnalis√©es dans nos noeuds
export interface NodeData {
    label?: string;
    // Ajoutez ici d'autres champs de donn√©es personnalis√©s si n√©cessaire
}

// Notre type de N≈ìud √©tendu √† partir de celui de React Flow
export type CustomNode = ReactFlowNode<NodeData, string | undefined>;


/**
 * Repr√©sentation d‚Äôun pipeline d‚Äôanalyse Elasticsearch au format graphe.
 */
export interface AnalyzerD {
    edges: ReactFlowEdge[]; // üëà Utilise directement le type de React Flow
    id?: string;
    name?: string;
    nodes: CustomNode[]; // üëà Utilise notre nouveau type personnalis√©
    settings?: { [key: string]: any };
    version?: string;
    [property: string]: any;
}import type { Node as ReactFlowNode, Edge as ReactFlowEdge } from 'reactflow';

/**
 * Type fonctionnel du n≈ìud.
 */
export enum Kind {
    CharFilter = "char_filter",
    Input = "input",
    Output = "output",
    TokenFilter = "token_filter",
    Tokenizer = "tokenizer",
}

/**
 * D√©finit la structure des donn√©es personnalis√©es que nous stockons
 * dans la propri√©t√© `data` de chaque n≈ìud React Flow.
 */
export interface NodeData {
    id: string;
    kind: Kind;
    name: string;
    label?: string;
    params?: { [key: string]: any }; 
}

/**
 * Notre type de N≈ìud complet pour l'application.
 * C'est un n≈ìud React Flow (`ReactFlowNode`) dont la propri√©t√© `data`
 * est garantie d'√™tre de type `NodeData`.
 */
export type CustomNode = ReactFlowNode<NodeData>;

/**
 * Repr√©sentation du graphe complet de l'analyseur.
 */
export interface AnalyzerD {
    edges: ReactFlowEdge[];
    id?: string;
    name?: string;
    nodes: CustomNode[];
    settings?: { [key: string]: any };
    version?: string;
}