import { render, screen, fireEvent } from '@testing-library/react';
import { describe, it, expect, beforeEach, vi } from 'vitest';
import { SchemaBanner } from '../SchemaBanner';

// Mock du hook useSchema
vi.mock('../../../hooks/useSchema', () => ({
  useSchema: vi.fn(),
}));

// Import du mock apr√®s vi.mock
import { useSchema } from '../../../hooks/useSchema';

describe('SchemaBanner', () => {
  const mockUseSchema = vi.mocked(useSchema);
  const mockReload = vi.fn();

  beforeEach(() => {
    vi.clearAllMocks();
    mockUseSchema.mockReturnValue({
      offline: false,
      updated: false,
      reload: mockReload,
      loading: false,
      schema: null,
      fieldTypes: [],
      operations: [],
      version: '2.2',
      error: null,
      etag: null,
    });
  });

  it('ne rend rien quand offline et updated sont false', () => {
    render(<SchemaBanner />);
    expect(screen.queryByText('Mode hors ligne')).not.toBeInTheDocument();
    expect(screen.queryByText('Sch√©ma mis √† jour')).not.toBeInTheDocument();
  });

  it('affiche le mode hors ligne quand offline est true', () => {
    mockUseSchema.mockReturnValue({
      offline: true,
      updated: false,
      reload: mockReload,
      loading: false,
      schema: null,
      fieldTypes: [],
      operations: [],
      version: '2.2',
      error: null,
      etag: null,
    });

    render(<SchemaBanner />);
    
    expect(screen.getByText('Mode hors ligne')).toBeInTheDocument();
    expect(screen.getByText('Le sch√©ma a √©t√© charg√© depuis le cache local')).toBeInTheDocument();
    expect(screen.getByText('üì°')).toBeInTheDocument();
    expect(screen.getByRole('button', { name: 'Recharger le sch√©ma' })).toBeInTheDocument();
  });

  it('affiche la mise √† jour du sch√©ma quand updated est true', () => {
    mockUseSchema.mockReturnValue({
      offline: false,
      updated: true,
      reload: mockReload,
      loading: false,
      schema: null,
      fieldTypes: [],
      operations: [],
      version: '2.2',
      error: null,
      etag: null,
    });

    render(<SchemaBanner />);
    
    expect(screen.getByText('Sch√©ma mis √† jour')).toBeInTheDocument();
    expect(screen.getByText('Une nouvelle version du sch√©ma est disponible')).toBeInTheDocument();
    expect(screen.getByText('üîÑ')).toBeInTheDocument();
    expect(screen.getByRole('button', { name: 'Recharger le sch√©ma' })).toBeInTheDocument();
  });

  it('appelle reload quand le bouton est cliqu√©', () => {
    mockUseSchema.mockReturnValue({
      offline: true,
      updated: false,
      reload: mockReload,
      loading: false,
      schema: null,
      fieldTypes: [],
      operations: [],
      version: '2.2',
      error: null,
      etag: null,
    });

    render(<SchemaBanner />);
    
    const reloadButton = screen.getByRole('button', { name: 'Recharger le sch√©ma' });
    fireEvent.click(reloadButton);
    
    expect(mockReload).toHaveBeenCalledWith(true);
  });

  it('d√©sactive le bouton et affiche "Chargement..." quand loading est true', () => {
    mockUseSchema.mockReturnValue({
      offline: true,
      updated: false,
      reload: mockReload,
      loading: true,
      schema: null,
      fieldTypes: [],
      operations: [],
      version: '2.2',
      error: null,
      etag: null,
    });

    render(<SchemaBanner />);
    
    const reloadButton = screen.getByRole('button', { name: 'Recharger le sch√©ma' });
    expect(reloadButton).toBeDisabled();
    expect(screen.getByText('Chargement...')).toBeInTheDocument();
  });

  it('affiche le bouton activ√© et "Recharger" quand loading est false', () => {
    mockUseSchema.mockReturnValue({
      offline: true,
      updated: false,
      reload: mockReload,
      loading: false,
      schema: null,
      fieldTypes: [],
      operations: [],
      version: '2.2',
      error: null,
      etag: null,
    });

    render(<SchemaBanner />);
    
    const reloadButton = screen.getByRole('button', { name: 'Recharger le sch√©ma' });
    expect(reloadButton).not.toBeDisabled();
    expect(screen.getByText('Recharger')).toBeInTheDocument();
  });

  it('affiche les deux √©tats quand offline et updated sont true', () => {
    mockUseSchema.mockReturnValue({
      offline: true,
      updated: true,
      reload: mockReload,
      loading: false,
      schema: null,
      fieldTypes: [],
      operations: [],
      version: '2.2',
      error: null,
      etag: null,
    });

    render(<SchemaBanner />);
    
    // Le composant devrait afficher quelque chose (probablement le premier √©tat rencontr√©)
    expect(screen.getByRole('button', { name: 'Recharger le sch√©ma' })).toBeInTheDocument();
  });
});
